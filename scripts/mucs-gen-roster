#!/usr/bin/bash

err() {
    echo "$1" >&2
    exit 1
}

parse_xls() {
    tr -d '[:space:]' |
    grep -Eo '(<td>[^<]*</td>){5}' |
    sed -E 's#^.*<td>([^@]+)[^<]+</td>$#"\1": "%s",#'
}

fill_lab_ids() {
    fmt="$(cat)"
    nlines="$(wc -l <<< "$fmt")"
    subs="$(printf "$1%.0s " $(seq $nlines))"
    printf "$fmt" $subs
}

(( $# < 2 )) &&
    err 'Usage: mucs-gen-roster CONFIG_PATH ROSTER_FILES...'

CONFIG_PATH="$1"
CONFIG_BAK_PATH="$CONFIG_PATH.bak"
shift

# Validate config file
jq . <"$CONFIG_PATH" >/dev/null 2>&1 ||
    err "Config file is invalid: $CONFIG_PATH"

# Warn that backup config file exists
if [[ -f "$CONFIG_BAK_PATH" ]]; then
    echo "Warning: backup file '$CONFIG_BAK_PATH' exists" >&2
    read -p 'Override backup (y/n)? ' resp
    [[ "$resp" =~ ^[yY]$ ]] || exit
fi

# Parse spreadsheets
data=''
for fn in "$@"; do
    [[ -f "$fn" ]] ||
        err "File not found: $fn"
    id="$(sed -E 's/^\w+ (\w+)\.xls$/\1/' <<< "$fn")"
    data+="$(parse_xls < "$fn" | fill_lab_ids "$id")"
done

# Backup original config and update roster
tmp_name="$(mktemp -u)"
jq --indent 4 ".roster={$data}" <"$CONFIG_PATH" >"$tmp_name"
mv "$CONFIG_PATH" "$CONFIG_BAK_PATH"
mv "$tmp_name" "$CONFIG_PATH"
